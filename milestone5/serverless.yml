
# "service" is the name of this project. This will also be added to your AWS resource names.
service: shopping

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    PRODUCTS_TABLE: ProductsTable-${sls:stage}
    DYNAMODB_TABLE: UserTable-${sls:stage}
    CART_TABLE: CartTable-${sls:stage}
    OPEN_SEARCH_DOMAIN: product-search-${sls:stage}
    ORDER_TABLE: OrderTable-${sls:stage}
    OPENSEARCH_ENDPOINT: 
      Fn::GetAtt: [OpenSearchDomain, DomainEndpoint]
    PASSWORD_SSM:  ${ssm:password}
    USERNAME_SSM:  ${ssm:username}
    
    


  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:BatchWriteItem
            - dynamodb:BatchGetItem
            
          Resource: 
            - arn:aws:dynamodb:us-east-1:*:table/ProductsTable-${sls:stage}
            - arn:aws:dynamodb:us-east-1:*:table/UserTable-${sls:stage}
            - arn:aws:dynamodb:us-east-1:*:table/CartTable-${sls:stage}
            - arn:aws:dynamodb:us-east-1:*:table/OrderTable-${sls:stage}
            - arn:aws:dynamodb:us-east-1:*:table/OrderTable-${sls:stage}/index/UserIDIndex
        - Effect: Allow
          Action:
          - dynamodb:GetRecords
          - dynamodb:GetShardIterator
          - dynamodb:DescribeStream
          - dynamodb:ListStreams
          Resource: 
          - !GetAtt ProductsTable.StreamArn
        - Effect: "Allow"
          Action:
            - "es:ESHttpPost"
            - "es:ESHttpPut"
            - "es:ESHttpGet"
            - "es:ESHttpDelete"
            - "ssm:GetParameter"
          Resource:
            - arn:aws:es:us-east-1:*:domain/product-search-${sls:stage}/*
            - arn:aws:ssm:us-east-1:*:parameter/password
            - arn:aws:ssm:us-east-1:*:parameter/username
           

functions:
  createUser:
    handler: src/handlers/createUser.createUser
    events:
      - http:
          path: /api/register
          method: post
          cors: true
  getUser:
    handler: src/handlers/getUser.getUser
    events:
      - http:
          path: /api/profile/{userId}
          method: get
          cors: true
  updateUser:
    handler: src/handlers/updateUser.updateUser
    events:
      - http:
          path: /api/profile
          method: put
          cors: true
  addToCart:
    handler: src/handlers/addToCart.addToCart
    events:
      - http:
          path: /api/cart
          method: post
          cors: true

  deleteFromCart:
    handler: src/handlers/deleteFromCart.deleteFromCart
    events:
      - http:
          path: /api/cart/{userId}/products/{productId}
          method: delete
          cors: true
  checkoutApi:
    handler: src/handlers/checkout.checkout
    events:
      - http:
          path: /api/checkout
          method: post
          cors: true
  orderTrack:
    handler: src/handlers/orderTrack.orderTrack
    events:
      - http:
          path: /api/orders/{orderId}/status
          method: get
          cors: true
  orderHistory:
    handler: src/handlers/orderHistory.orderHistory
    events:
      - http:
          path: /api/orders
          method: get
          cors: true
          
  productSearch:
    handler: src/handlers/productHandler.searchProducts
    events:
      - http:
          path: /api/products
          method: get
          cors: true

  syncDynamoToOpenSearch:
    handler: src/handlers/syncHandler.syncDynamoToOpenSearch
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - ProductsTable
              - StreamArn
      
resources:
  Resources:
    OpenSearchDomain:
      Type: AWS::OpenSearchService::Domain
      Properties:
        DomainName: product-search-${sls:stage}
        EngineVersion: "OpenSearch_2.7"
        NodeToNodeEncryptionOptions:
          Enabled: true
        EncryptionAtRestOptions:
          Enabled: true
        DomainEndpointOptions:
          EnforceHTTPS: true
          TLSSecurityPolicy: Policy-Min-TLS-1-2-2019-07
        ClusterConfig:
          InstanceType: "t3.small.search"
          InstanceCount: 1
          DedicatedMasterEnabled: false
        EBSOptions:
          EBSEnabled: true
          VolumeSize: 10
          VolumeType: "gp2"
        AccessPolicies:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - "es:ESHttpPut"
                - "es:ESHttpPost"
                - "es:ESHttpGet"
                - "es:ESHttpDelete"
              Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/product-search-${sls:stage}/*"
             
        AdvancedSecurityOptions:
          Enabled: true
          InternalUserDatabaseEnabled: true
          MasterUserOptions:
            MasterUserName: ${ssm:username}
            MasterUserPassword: ${ssm:password}


    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ProductsTable-${sls:stage}
        AttributeDefinitions:
          - AttributeName: ProductID
            AttributeType: S
        KeySchema:
          - AttributeName: ProductID
            KeyType: HASH
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES" 
        BillingMode: PAY_PER_REQUEST
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserTable-${sls:stage}
        AttributeDefinitions:
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: UserId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    OrderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: OrderTable-${sls:stage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST


    CartTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CartTable-${sls:stage}
        AttributeDefinitions:
          - AttributeName: UserId
            AttributeType: S
          - AttributeName: ProductId
            AttributeType: S
        KeySchema:
          - AttributeName: UserId
            KeyType: HASH
          - AttributeName: ProductId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
plugins:
  - serverless-offline
